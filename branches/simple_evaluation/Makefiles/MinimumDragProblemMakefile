##########################################################################
#                                                                        # 
#   Flood Neural Network                                                 #
#                                                                        #
#   M I N I M U M   D R A G   P R O B L E M   M A K E F I L E            #
#                                                                        #
#   Roberto Lopez                                                        #
#   International Center for Numerical Methods in Engineering (CIMNE)    #
#   Technical University of Catalonia (UPC)                              #
#   Barcelona, Spain                                                     #
#   E-mail: rlopez@cimne.upc.edu                                         #
#                                                                        #
##########################################################################

objects = MinimumDragProblemApplication.o \
    	  OrdinaryDifferentialEquations.o \
          Perceptron.o \
    	  MultilayerPerceptron.o \
     	  ObjectiveFunctional.o \
          MinimumDragProblem.o \
    	  TrainingAlgorithm.o \
    	  QuasiNewtonMethod.o \
    	  RandomSearch.o 


Flood: $(objects)
	g++ $(objects) -o Flood 

# Main function

MinimumDragProblemApplication.o: ../Applications/MinimumDragProblemApplication.cpp
	g++ -c ../Applications/MinimumDragProblemApplication.cpp -o MinimumDragProblemApplication.o


# Utilities

OrdinaryDifferentialEquations.o: ../Flood/Utilities/OrdinaryDifferentialEquations.cpp
	g++ -c ../Flood/Utilities/OrdinaryDifferentialEquations.cpp -o OrdinaryDifferentialEquations.o

# Perceptron

Perceptron.o: ../Flood/Perceptron/Perceptron.cpp
	g++ -c ../Flood/Perceptron/Perceptron.cpp -o Perceptron.o


# Multilayer perceptron

MultilayerPerceptron.o: ../Flood/MultilayerPerceptron/MultilayerPerceptron.cpp
	g++ -c ../Flood/MultilayerPerceptron/MultilayerPerceptron.cpp -o  MultilayerPerceptron.o


# Objective functional

ObjectiveFunctional.o: ../Flood/ObjectiveFunctional/ObjectiveFunctional.cpp
	g++ -c ../Flood/ObjectiveFunctional/ObjectiveFunctional.cpp -o  ObjectiveFunctional.o

MinimumDragProblem.o: ../Flood/ObjectiveFunctional/MinimumDragProblem.cpp
	g++ -c ../Flood/ObjectiveFunctional/MinimumDragProblem.cpp -o MinimumDragProblem.o


# Training algorithm

TrainingAlgorithm.o: ../Flood/TrainingAlgorithm/TrainingAlgorithm.cpp
	g++ -c ../Flood/TrainingAlgorithm/TrainingAlgorithm.cpp -o TrainingAlgorithm.o

RandomSearch.o: ../Flood/TrainingAlgorithm/RandomSearch.cpp
	g++ -c ../Flood/TrainingAlgorithm/RandomSearch.cpp -o RandomSearch.o

QuasiNewtonMethod.o: ../Flood/TrainingAlgorithm/QuasiNewtonMethod.cpp
	g++ -c ../Flood/TrainingAlgorithm/QuasiNewtonMethod.cpp -o QuasiNewtonMethod.o

clean:
	rm $(objects) Flood


# Flood: An Open Source Neural Networks C++ Library.
# Copyright (C) 2005-2008 Roberto Lopez 
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
