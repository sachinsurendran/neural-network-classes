!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ClientSocket	ClientSocket.cpp	/^ClientSocket::ClientSocket ( std::string host, int port )$/;"	f	class:ClientSocket
ClientSocket	ClientSocket.h	/^class ClientSocket : private Socket$/;"	c
ClientSocket_class	ClientSocket.h	4;"	d
DOWN	Evaluator.h	/^	DOWN = 1,$/;"	e	enum:key_types
END_GAME	Evaluator.h	/^    END_GAME  = 1$/;"	e	enum:msg_type
ERROR	Evaluator.h	13;"	d
Evaluator	Evaluator.h	/^Evaluator::Evaluator() {$/;"	f	class:Evaluator
Evaluator	Evaluator.h	/^class Evaluator$/;"	c
FALSE	Evaluator.h	12;"	d
GAME_INIT	Evaluator.h	/^    GAME_INIT = 0,$/;"	e	enum:msg_type
GAME_INIT	Socket.cpp	10;"	d	file:
GameState	Evaluator.h	/^class GameState$/;"	c
HIT	Evaluator.h	/^	HIT  = 2$/;"	e	enum:key_types
KEY_LEN	Evaluator.h	7;"	d
MAXCONNECTIONS	Socket.h	/^const int MAXCONNECTIONS = 5;$/;"	v
MAXHOSTNAME	Socket.h	/^const int MAXHOSTNAME = 200;$/;"	v
MAXRECV	Socket.h	/^const int MAXRECV = 500;$/;"	v
NN_to_tennix	Socket.cpp	/^NN_to_tennix::NN_to_tennix(void)$/;"	f	class:NN_to_tennix
NN_to_tennix	Socket.h	/^class NN_to_tennix {$/;"	c
NN_to_tennix_msg	Socket.h	/^struct NN_to_tennix_msg {$/;"	s
ServerSocket	ServerSocket.cpp	/^ServerSocket::ServerSocket ( int port )$/;"	f	class:ServerSocket
ServerSocket	ServerSocket.h	/^  ServerSocket (){};$/;"	f	class:ServerSocket
ServerSocket	ServerSocket.h	/^class ServerSocket : private Socket$/;"	c
ServerSocket_class	ServerSocket.h	4;"	d
Socket	Socket.cpp	/^Socket::Socket() :$/;"	f	class:Socket
Socket	Socket.h	/^class Socket$/;"	c
SocketException	SocketException.h	/^  SocketException ( std::string s ) : m_s ( s ) {};$/;"	f	class:SocketException
SocketException	SocketException.h	/^class SocketException$/;"	c
SocketException_class	SocketException.h	5;"	d
Socket_class	Socket.h	4;"	d
TENNIX_SERVER_PORT	Evaluator.h	9;"	d
TRUE	Evaluator.h	11;"	d
UP	Evaluator.h	/^	UP   = 0,$/;"	e	enum:key_types
accept	ServerSocket.cpp	/^void ServerSocket::accept ( ServerSocket& sock )$/;"	f	class:ServerSocket
accept	Socket.cpp	/^bool Socket::accept ( Socket& new_socket ) const$/;"	f	class:Socket
ball_x	Evaluator.h	/^	float ball_x;$/;"	m	class:GameState
ball_x	Socket.h	/^	float ball_x;$/;"	m	struct:tennix_to_NN_msg
ball_y	Evaluator.h	/^	float ball_y;$/;"	m	class:GameState
ball_y	Socket.h	/^	float ball_y;$/;"	m	struct:tennix_to_NN_msg
bind	Socket.cpp	/^bool Socket::bind ( const int port )$/;"	f	class:Socket
client_socket	Evaluator.h	/^        ClientSocket client_socket;$/;"	m	class:Evaluator
connect	Socket.cpp	/^bool Socket::connect ( const std::string host, const int port )$/;"	f	class:Socket
create	Socket.cpp	/^bool Socket::create()$/;"	f	class:Socket
description	SocketException.h	/^  std::string description() { return m_s; }$/;"	f	class:SocketException
fitness	Evaluator.h	/^        float fitness;$/;"	m	class:GameState
fitness	Socket.h	/^        float fitness;$/;"	m	struct:tennix_to_NN_msg
game_ended	Evaluator.h	/^        char  game_ended;\/* Bool which tell game ending, time to check fitness *\/$/;"	m	class:GameState
get_game_state	Evaluator.h	/^Evaluator::get_game_state(GameState *gamestate)$/;"	f	class:Evaluator
initiate_evaluation_session	Evaluator.h	/^Evaluator::initiate_evaluation_session(void)$/;"	f	class:Evaluator
is_valid	Socket.h	/^  bool is_valid() const { return m_sock != -1; }$/;"	f	class:Socket
key_types	Evaluator.h	/^enum key_types {$/;"	g
keys	Socket.h	/^	int keys[3];  \/* UP, DOWN, HIT *\/$/;"	m	struct:NN_to_tennix_msg
listen	Socket.cpp	/^bool Socket::listen() const$/;"	f	class:Socket
m_addr	Socket.h	/^  sockaddr_in m_addr;$/;"	m	class:Socket
m_s	SocketException.h	/^  std::string m_s;$/;"	m	class:SocketException
m_sock	Socket.h	/^  int m_sock;$/;"	m	class:Socket
main	simple_client_main.cpp	/^int main ( int argc, char *argv[] )$/;"	f
msg	Socket.h	/^        struct NN_to_tennix_msg msg;$/;"	m	class:NN_to_tennix	typeref:struct:NN_to_tennix::NN_to_tennix_msg
msg	Socket.h	/^        struct tennix_to_NN_msg msg;$/;"	m	class:tennix_to_NN	typeref:struct:tennix_to_NN::tennix_to_NN_msg
msg_type	Evaluator.h	/^enum msg_type {$/;"	g
msg_type	Socket.h	/^	int msg_type; \/* Type of message *\/$/;"	m	struct:NN_to_tennix_msg
msg_type	Socket.h	/^	int msg_type;$/;"	m	struct:tennix_to_NN_msg
operator <<	ClientSocket.cpp	/^const ClientSocket& ClientSocket::operator << ( NN_to_tennix& d ) const$/;"	f	class:ClientSocket
operator <<	ClientSocket.cpp	/^const ClientSocket& ClientSocket::operator << ( const std::string& s ) const$/;"	f	class:ClientSocket
operator <<	ServerSocket.cpp	/^const ServerSocket& ServerSocket::operator << ( const std::string& s ) const$/;"	f	class:ServerSocket
operator <<	ServerSocket.cpp	/^const ServerSocket& ServerSocket::operator << ( tennix_to_NN& d ) const$/;"	f	class:ServerSocket
operator >>	ClientSocket.cpp	/^const ClientSocket& ClientSocket::operator >> ( std::string& s ) const$/;"	f	class:ClientSocket
operator >>	ClientSocket.cpp	/^const ClientSocket& ClientSocket::operator >> ( tennix_to_NN& d ) const$/;"	f	class:ClientSocket
operator >>	ServerSocket.cpp	/^const ServerSocket& ServerSocket::operator >> ( NN_to_tennix& d ) const$/;"	f	class:ServerSocket
operator >>	ServerSocket.cpp	/^const ServerSocket& ServerSocket::operator >> ( std::string& s ) const$/;"	f	class:ServerSocket
opponent_x	Evaluator.h	/^	float opponent_x;$/;"	m	class:GameState
opponent_x	Socket.h	/^	float opponent_x;$/;"	m	struct:tennix_to_NN_msg
opponent_y	Evaluator.h	/^	float opponent_y;$/;"	m	class:GameState
opponent_y	Socket.h	/^	float opponent_y;$/;"	m	struct:tennix_to_NN_msg
recv	Socket.cpp	/^int Socket::recv ( NN_to_tennix& d ) const$/;"	f	class:Socket
recv	Socket.cpp	/^int Socket::recv ( std::string& s ) const$/;"	f	class:Socket
recv	Socket.cpp	/^int Socket::recv ( tennix_to_NN& d ) const$/;"	f	class:Socket
send	Socket.cpp	/^bool Socket::send ( NN_to_tennix d ) const$/;"	f	class:Socket
send	Socket.cpp	/^bool Socket::send ( const std::string s ) const$/;"	f	class:Socket
send	Socket.cpp	/^bool Socket::send ( tennix_to_NN d ) const$/;"	f	class:Socket
send_NN_response	Evaluator.h	/^send_NN_response(int *keys, int len)$/;"	f
seq_no	Evaluator.h	/^        int seq_no;$/;"	m	class:Evaluator
seq_no	Socket.h	/^	int seq_no;$/;"	m	struct:NN_to_tennix_msg
seq_no	Socket.h	/^	int seq_no;$/;"	m	struct:tennix_to_NN_msg
set_non_blocking	Socket.cpp	/^void Socket::set_non_blocking ( const bool b )$/;"	f	class:Socket
simple_client_objects	Makefile	/^simple_client_objects = ClientSocket.o Socket.o simple_client_main.o$/;"	m
simple_server_objects	Makefile	/^simple_server_objects = ServerSocket.o Socket.o simple_server_main.o$/;"	m
size	Socket.cpp	/^int NN_to_tennix::size(void) $/;"	f	class:NN_to_tennix
size	Socket.cpp	/^int tennix_to_NN::size(void)$/;"	f	class:tennix_to_NN
tennix_to_NN	Socket.cpp	/^tennix_to_NN::tennix_to_NN(void)$/;"	f	class:tennix_to_NN
tennix_to_NN	Socket.h	/^class tennix_to_NN {$/;"	c
tennix_to_NN_msg	Socket.h	/^struct tennix_to_NN_msg {$/;"	s
~ClientSocket	ClientSocket.h	/^  virtual ~ClientSocket(){};$/;"	f	class:ClientSocket
~ServerSocket	ServerSocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:ServerSocket
~Socket	Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
~SocketException	SocketException.h	/^  ~SocketException (){};$/;"	f	class:SocketException
